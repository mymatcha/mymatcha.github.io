<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>抹茶</title>
  
  <subtitle>且听风吟，静待花开。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-10T01:41:36.322Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot实现文件的下载(处理中文乱码)</title>
    <link href="http://yoursite.com/2020/04/09/springboot%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2020/04/09/springboot%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/</id>
    <published>2020-04-09T02:12:18.231Z</published>
    <updated>2020-04-10T01:41:36.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对文件下载的理解"><a href="#对文件下载的理解" class="headerlink" title="对文件下载的理解"></a>对文件下载的理解</h2><p>文件下载的实现可以理解为是将一个文件以字节流的形式响应给客户端。但是简单地传递流并不能实现文件下载。还需要设置两个头信息。</p><p>1.设置响应内容的类型ContentType为下载的类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"application/force-download"</span>);</span><br></pre></td></tr></table></figure><p>2.设置响应头信息Header来指定文件名和文件的扩展类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;fileName="</span> + fileName);</span><br></pre></td></tr></table></figure><h3 id="完整的Controller类"><a href="#完整的Controller类" class="headerlink" title="完整的Controller类"></a>完整的Controller类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(<span class="string">"/downloadFiles"</span>)</span><br><span class="line">public void downloadFiles(String fileName,HttpServletResponse response) &#123;</span><br><span class="line"></span><br><span class="line">    String filePath = <span class="string">"C:/upFiles"</span>;</span><br><span class="line">    File file = new File( filePath+ <span class="string">"/"</span> + fileName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">        //注意在将中文数据传回前端时，要将字符串先通过utf-8解码为字节码，</span><br><span class="line">        //然后通过ios-8859-1的方式进行编码，在传回前端。</span><br><span class="line">        fileName = new String(fileName.getBytes(StandardCharsets.UTF_8),</span><br><span class="line">        StandardCharsets.ISO_8859_1);</span><br><span class="line">        response.setContentType(<span class="string">"application/force-download"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;fileName="</span> + fileName);</span><br><span class="line"></span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        OutputStream os = null;</span><br><span class="line">        FileInputStream fis = null;</span><br><span class="line">        BufferedInputStream bis = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            os = response.getOutputStream();</span><br><span class="line">            fis = new FileInputStream(file);</span><br><span class="line">            bis = new BufferedInputStream(fis);</span><br><span class="line">            int r = 0;</span><br><span class="line">            <span class="keyword">while</span> ((r = bis.read(buffer)) != -1)&#123;</span><br><span class="line">                os.write(buffer,0,r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            //关闭流</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">if</span> (os != null)&#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">if</span> (bis != null)&#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != null)&#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h2><p>只需要增加一个访问controller的连接即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"/downloadFiles?fileName=我的文件.txt"</span>&gt;我的文件.txt&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="文件下载中中文乱码问题"><a href="#文件下载中中文乱码问题" class="headerlink" title="文件下载中中文乱码问题"></a>文件下载中中文乱码问题</h2><p>首先，在处理文件下载时的中文乱码问题前，要处理前后端一般交互时的中文乱码问题，解决这个问题要进行两个操作。</p><ol><li>将文件的默认编码方式改为UTF-8<br><img src="%E4%BF%AE%E6%94%B9IDEA%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81.png" alt="icon"></li><li>配置springboot的配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.http.encoding.charset=utf-8</span><br><span class="line">spring.http.encoding.enabled=<span class="literal">true</span></span><br><span class="line">spring.http.encoding.force=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在将上面的配置完成后，一般的前后端交互时不会出现中文乱码的。但是，文件的下载是通过链接以get方式在url中传递信息给后端，在url中字符的编码方式为ISO-8859-1。所以在后端将信息返回给前端时，也要将字符串的编码修改为ISO-8859-1，然后才返回给前端。</p><p>将文件名先通过UTF-8编码进行解码成字节码，再通过ISO-8859-1编码编码为字符串，这样便可以使响应给前端的中文信息即文件名不乱码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fileName = new String(fileName.getBytes(StandardCharsets.UTF_8),</span><br><span class="line">        StandardCharsets.ISO_8859_1);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对文件下载的理解&quot;&gt;&lt;a href=&quot;#对文件下载的理解&quot; class=&quot;headerlink&quot; title=&quot;对文件下载的理解&quot;&gt;&lt;/a&gt;对文件下载的理解&lt;/h2&gt;&lt;p&gt;文件下载的实现可以理解为是将一个文件以字节流的形式响应给客户端。但是简单地传递流并不能实现文
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>springboot实现文件上传</title>
    <link href="http://yoursite.com/2020/04/06/springboot%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2020/04/06/springboot%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-04-06T03:43:57.992Z</published>
    <updated>2020-04-09T08:50:40.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对文件上传的理解"><a href="#对文件上传的理解" class="headerlink" title="对文件上传的理解"></a>对文件上传的理解</h2><p>文件上传可以理解为这么一个过程：客户端通过表单将文件传递给服务端，服务端获取到文件后，通过MultipartFile的transferTo()方法将文件传输至特定的路径，即可完成文件的上传。</p><h2 id="application-properties文件的配置"><a href="#application-properties文件的配置" class="headerlink" title="application.properties文件的配置"></a>application.properties文件的配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传文件的总大小</span></span><br><span class="line">spring.servlet.multipart.max-request-size=10MB</span><br><span class="line"><span class="comment">#上传文件中单个文件的大小</span></span><br><span class="line">spring.servlet.multipart.file-size-threshold=10MB</span><br><span class="line"><span class="comment">#设置tomcat的最大吞吐量，取值为-1时，不限制吞吐量</span></span><br><span class="line">server.tomcat.max-swallow-size=100MB</span><br></pre></td></tr></table></figure><p>注意：配置中tomcat的吞吐量配置尤其重要。否则当出现上传文件比限制容量大时，所报的<span style="color:red">MaxUploadSizeExceededException异常无法被全局异常处理类捕获到</span>，从而无法处理异常。</p><p>这个异常在访问controller之前就已经发生，由tomcat抛出。配置了合适的tomcat吞吐量即可通过程序捕获该异常。</p><h2 id="controller类"><a href="#controller类" class="headerlink" title="controller类"></a>controller类</h2><h3 id="上传单个文件"><a href="#上传单个文件" class="headerlink" title="上传单个文件"></a>上传单个文件</h3><p>注意要在controller上加@RestController注解。该注解的作用等同于在类上加@Controller注解，在类里面所有方法上加@ResponeBody注解的作用。让方法以字符串的形式返回到前端界面。</p><p>PostMapping的作用等同于@RequestMapping和访问方式设置为post。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//上传单个文件</span><br><span class="line">@PostMapping(<span class="string">"/uploadFile"</span>)</span><br><span class="line">public String uploadFile(@RequestParam(<span class="string">"file"</span>) MultipartFile file)&#123;</span><br><span class="line">    //无论是否上传文件，file对象永不为空，但可能是空值</span><br><span class="line">    //System.out.println(file);</span><br><span class="line">    <span class="keyword">if</span> (file.isEmpty())&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"请选择文件"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        String filePath = <span class="string">"C:/a"</span>;</span><br><span class="line"></span><br><span class="line">        File dest = new File(filePath + <span class="string">"/"</span> + fileName);</span><br><span class="line">        //如果文件不存在，则创建文件（文件夹也属于文件）</span><br><span class="line">        <span class="keyword">if</span> (!dest.getParentFile().exists())&#123;</span><br><span class="line">            dest.getParentFile().mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="built_in">return</span> <span class="string">"上传失败。"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"上传成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<span style="color:red">在上传单个文件时，无论是否有文件上传，在该方法中file对象永不为null，但是file的内部值可以为空。</span>（参考String对象存在null和””空串两种情况），所以在判定是否有文件上传时，只需要使用file.isEmpty()判断。</p><h3 id="上传多个文件"><a href="#上传多个文件" class="headerlink" title="上传多个文件"></a>上传多个文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(<span class="string">"/uploadFiles"</span>)</span><br><span class="line">public String uploadMultipartFile(List&lt;MultipartFile&gt; files)&#123;</span><br><span class="line"></span><br><span class="line">    //无论是否有文件上传，files对象和files内部的各个值永不为空，</span><br><span class="line">    //所以不用判断files是否为空或者files内部值是否为空,</span><br><span class="line">    //而通过名字是否为空以及是否为空串来判断是否选择了文件</span><br><span class="line"></span><br><span class="line">    //使用request方式获取参数</span><br><span class="line">    //List&lt;MultipartFile&gt; files = ((MultipartHttpServletRequest)request).getFiles(<span class="string">"file"</span>);</span><br><span class="line"></span><br><span class="line">    String filePath = <span class="string">"C:/upFiles"</span>;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">if</span> (fileName != null &amp;&amp; !fileName.equals(<span class="string">""</span>))&#123;</span><br><span class="line">            File dest = new File(filePath + <span class="string">"/"</span> + fileName);</span><br><span class="line">            //当文件夹不存在时，创建文件夹</span><br><span class="line">            <span class="keyword">if</span> (!dest.getParentFile().exists())&#123;</span><br><span class="line">                dest.getParentFile().mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                file.transferTo(dest);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="built_in">return</span> <span class="string">"上传失败。"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //当一个文件也没有选择时，也是上传成功，不会上传内容</span><br><span class="line">    <span class="built_in">return</span> <span class="string">"上传成功。"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递参数的方式有两种，第一种：直接自动注入到list集合中；第二种：使用request获取，如注释代码中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;MultipartFile&gt; files = ((MultipartHttpServletRequest)request).getFiles(<span class="string">"file"</span>);</span><br></pre></td></tr></table></figure><p>注意：<span style="color:red">在传递多个文件时，对于集合对象files，无论是否有文件上传，files的值永不为空，同时files集合内部的MultipartFile对象也永不为空。</span>所以无法通过file集合来判断是否有文件上传。</p><p>解决方法：使用文件名来判断是否上传，如果文件未上传，则文件名为空串，若文件上传，则文件名不为空串，也不为null。</p><p>当没有选择文件时，也是上传成功，但是不会传输文件。</p><hr><h2 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;upload&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;上传单个文件&lt;/h3&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/uploadFile"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;</span><br><span class="line">        &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;上传&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;上传多个文件&lt;/h3&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/uploadFiles"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">        &lt;!--实现上传多个文件，接受的文件类型不限制（accept=<span class="string">".txt,.doc"</span>）--&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"file"</span> name=<span class="string">"files"</span> accept=<span class="string">".java,.txt"</span> multiple&gt;</span><br><span class="line">        &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;上传&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在form标签中要添加enctype=”multipart/form-data”属性。</p><blockquote><p>enctype就是encodetype就是编码类型。enctype属性规定在发送到服务器之前应该如何对表单数据进行编码</p></blockquote><blockquote><p>默认情况下，enctype的值是application/x-www-form-urlencoded，不能用于文件上传，一般用于传输文本。</p></blockquote><blockquote><p>multipart/-form-data是指表单数据有多部分构成，既有文本数据，又有文件等二进制数据的意思。</p></blockquote><blockquote><p>multipart/form-data是将文件以二进制的形式传递，可以用于文件的上传。</p></blockquote><p>实现多个文件上传的标签</p><blockquote><p>属性accept=”.java,.txt”表示接受的文件类型。</p></blockquote><blockquote><p>属性multiple表示支持多文件上传，在点击上传后，一次性选中多个文件即可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对文件上传的理解&quot;&gt;&lt;a href=&quot;#对文件上传的理解&quot; class=&quot;headerlink&quot; title=&quot;对文件上传的理解&quot;&gt;&lt;/a&gt;对文件上传的理解&lt;/h2&gt;&lt;p&gt;文件上传可以理解为这么一个过程：客户端通过表单将文件传递给服务端，服务端获取到文件后，通过M
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://yoursite.com/2020/04/03/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2020/04/03/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2020-04-03T14:01:09.220Z</published>
    <updated>2020-04-03T14:28:02.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是代理模式-Proxy"><a href="#什么是代理模式-Proxy" class="headerlink" title="什么是代理模式(Proxy)"></a>什么是代理模式(Proxy)</h2><ul><li>定义：给目标对象提供一个代理对象，并由代理对象控制对目标对象的引用</li></ul><h2 id="为什么要用代理"><a href="#为什么要用代理" class="headerlink" title="为什么要用代理"></a>为什么要用代理</h2><ul><li>最最最主要的原因就是，在不改变目标对象方法的情况下对方法进行增强，比如，我们希望对方法的调用增加日志记录，或者对方法的调用进行拦截，等等…</li></ul><hr><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><ul><li><p>代理类要实现InvocationHandler接口,重写接口中的invoke方法</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">//代理类，一定要实现InvocationHandler接口</span><br><span class="line">public class CalculatorProxy implements InvocationHandler&#123;</span><br><span class="line">    //要被代理的对象</span><br><span class="line">    private Calculator myProxy;</span><br><span class="line"></span><br><span class="line">    //返回代理对象</span><br><span class="line">    public Calculator getMyProxy(Calculator myProxy) &#123;</span><br><span class="line">        this.myProxy = myProxy;</span><br><span class="line">        <span class="built_in">return</span> (Calculator) Proxy.newProxyInstance(myProxy.getClass().getClassLoader(),</span><br><span class="line">                myProxy.getClass().getInterfaces(),this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //被代理对象的方法的执行，带有返回值</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        Object result = null;</span><br><span class="line"></span><br><span class="line">        int num = method.getParameterCount();</span><br><span class="line">        Class clazz = method.getReturnType();</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(num == 3)&#123;</span><br><span class="line">            System.out.println(<span class="string">"参数为3个的方法开始执行。"</span>);</span><br><span class="line">            result = method.invoke(myProxy,args);</span><br><span class="line">            System.out.println(<span class="string">"参数为3个的方法执行结束。"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(clazz.getName().equals(<span class="string">"double"</span>))&#123;//注意对于基本数据类型首字符要小写</span><br><span class="line">            System.out.println(<span class="string">"返回值为double的方法开始执行。"</span>);</span><br><span class="line">            result = method.invoke(myProxy,args);</span><br><span class="line">            System.out.println(<span class="string">"返回值为double的方法执行结束。"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(methodName.equals(<span class="string">"print"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"名字为print的方法开始执行。"</span>);</span><br><span class="line">            result = method.invoke(myProxy,args);</span><br><span class="line">            System.out.println(<span class="string">"名字为print的方法执行结束。"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            //第一个参数：被代理的对象</span><br><span class="line">            //第二个参数：被代理对象的方法的参数</span><br><span class="line">            //该代码的作用：执行被代理对象的方法</span><br><span class="line">            result = method.invoke(myProxy,args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li><p>被代理类要实现一个接口，因为代理类只针对于接口中的方法才可以实现代理</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface Calculator &#123;</span><br><span class="line">        int add(int i,int j);</span><br><span class="line">        int add(int i,int j,int k);</span><br><span class="line">        double add(double i,double j);</span><br><span class="line">        void <span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="被代理类"><a href="#被代理类" class="headerlink" title="被代理类"></a>被代理类</h3><ul><li><p>实现接口，接口中的方法可以加强</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class CalculatorImpl implements Calculator &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int add(int i,int j) &#123;</span><br><span class="line">        System.out.println(i + j);</span><br><span class="line">        <span class="built_in">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int add(int i, int j, int k) &#123;</span><br><span class="line">        System.out.println(i + j + k);</span><br><span class="line">        <span class="built_in">return</span> i + j + k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double add(double i, double j) &#123;</span><br><span class="line">        System.out.println(i + j);</span><br><span class="line">        <span class="built_in">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void <span class="function"><span class="title">print</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"这是一个打印功能！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h3><ul><li><p>先创建被代理对象，再创建代理对象，将代理对象放置于代理对象中，已实现对方法的加强</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建被代理对象</span><br><span class="line">        Calculator calculator = new CalculatorImpl();</span><br><span class="line">        //通过代理类获取代理对象</span><br><span class="line">        Calculator proxy = new CalculatorProxy().getMyProxy(calculator);</span><br><span class="line">        proxy.add(1,2);</span><br><span class="line">        System.out.println();</span><br><span class="line">        proxy.add(1,2,3);</span><br><span class="line">        System.out.println();</span><br><span class="line">        proxy.add(1,1.1);</span><br><span class="line">        System.out.println();</span><br><span class="line">        proxy.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="代理类-1"><a href="#代理类-1" class="headerlink" title="代理类"></a>代理类</h3><ul><li><p>实现和被代理类一样的接口</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class CalculatorProxy implements Calculator &#123;</span><br><span class="line">    private Calculator proxy;</span><br><span class="line"></span><br><span class="line">    public CalculatorProxy(Calculator proxy)&#123;</span><br><span class="line">        this.proxy = proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int add(int i, int j) &#123;</span><br><span class="line">        System.out.println(<span class="string">"add方法开始执行！"</span>);</span><br><span class="line">        int num = proxy.add(i,j);</span><br><span class="line">        System.out.println(<span class="string">"add方法执行结束！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><ul><li><p>代理类只对接口中的方法进行加强</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Calculator &#123;</span><br><span class="line">    int add(int i,int j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="被代理类-1"><a href="#被代理类-1" class="headerlink" title="被代理类"></a>被代理类</h3><ul><li><p>实现接口</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class CalculatorImpl implements Calculator &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int add(int i, int j) &#123;</span><br><span class="line">    System.out.println(i + j);</span><br><span class="line">    <span class="built_in">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试函数-1"><a href="#测试函数-1" class="headerlink" title="测试函数"></a>测试函数</h3><ul><li><p>先创建被代理对象，再创建代理对象，将代理对象放置于代理对象中，已实现对方法的加强</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Calculator calculator = new CalculatorImpl();</span><br><span class="line">        CalculatorProxy proxy = new CalculatorProxy(calculator);</span><br><span class="line">        proxy.add(1,2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="动态代理和静态代理的区别"><a href="#动态代理和静态代理的区别" class="headerlink" title="动态代理和静态代理的区别"></a>动态代理和静态代理的区别</h2><ul><li><p>1、静态代理业务类只需要关注业务逻辑本身，保证了业务类的重用性。代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，需要为每一种方法都进行<br>代理，静态代理在程序规模稍大时就无法胜任。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法，增加了代码维护的复杂度。</p></li><li><p>2、动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler invoke）。这样，在接口方法数量比较多的时候，可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。而且动态代理的应用使类职责更加单一，复用性更强。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是代理模式-Proxy&quot;&gt;&lt;a href=&quot;#什么是代理模式-Proxy&quot; class=&quot;headerlink&quot; title=&quot;什么是代理模式(Proxy)&quot;&gt;&lt;/a&gt;什么是代理模式(Proxy)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;定义：给目标对象提供一个代理对象，并
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/03/hello-world/"/>
    <id>http://yoursite.com/2020/04/03/hello-world/</id>
    <published>2020-04-03T03:30:38.605Z</published>
    <updated>2020-04-03T03:30:38.605Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
